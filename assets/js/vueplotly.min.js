document.querySelectorAll("plotly").forEach(e=>{["data","layout","config"].forEach(t=>{let i=e.getAttribute(t),r=e.getAttribute(":"+t);if(null!=i&&null!=r)throw Error("Both bound and literal attribute found for "+t+". Only one is allowed.");if(null==r&&null!=i)try{let n=atob(i),l=function e(t){let i=JSON.parse(t),r=function e(t){return Array.isArray(t)?"["+t.map(t=>e(t)).join(", ")+"]":"object"==typeof t?"{"+Object.keys(t).map(e=>{let i=t[e];return`${e}:${i="string"==typeof i&&i.startsWith("$_{")&&i.endsWith("}")?i.slice(3,-1):JSON.stringify(i)}`}).join(", ")+"}":JSON.stringify(t)}(i);return r}(n);e.setAttribute(":"+t,l),e.removeAttribute(t)}catch(o){if(i.startsWith("{")&&i.endsWith("}")||i.startsWith("[")&&i.endsWith("]"))e.setAttribute(":"+t,i),e.removeAttribute(t);else throw Error("Invalid literal attribute for "+t+". Expected a base64-encoded JSON string, or a valid JS object.")}})});const eventsName=["AfterExport","AfterPlot","Animated","AnimatingFrame","AnimationInterrupted","AutoSize","BeforeExport","ButtonClicked","Click","ClickAnnotation","Deselect","DoubleClick","Framework","Hover","LegendClick","LegendDoubleClick","Relayout","Restyle","Redraw","Selected","Selecting","SliderChange","SliderEnd","SliderStart","Transitioning","TransitionInterrupted","Unhover"],events=eventsName.map(e=>e.toLocaleLowerCase()).map(e=>({completeName:"plotly_"+e,handler:t=>(...i)=>{t.$emit.apply(t,[e,...i])}})),plotlyFunctions=["restyle","relayout","update","addTraces","deleteTraces","moveTraces","extendTraces","prependTraces","purge"];function cached(e){let t=Object.create(null);return function(i){return t[i]||(t[i]=e(i))}}const regex=/-(\w)/g,methods=plotlyFunctions.reduce((e,t)=>(e[t]=function(...e){return Plotly[t].apply(Plotly,[this.$el,...e])},e),{}),camelize=cached(e=>e.replace(regex,(e,t)=>t?t.toUpperCase():"")),directives={};"undefined"!=typeof window&&(directives.resize=Vueresize),Vue.component("plotly",{template:'<div :id="id" v-resize:debounce.100="onResize" :class="$attrs.class" :style="$attrs.style"></div>',inheritAttrs:!1,directives:directives,props:{data:{type:Array},layout:{type:Object},config:{type:Object},id:{type:String,required:!1,default:null}},data(){return{scheduled:null,innerLayout:{...this.layout}}},mounted(){Plotly.newPlot(this.$el,this.data,this.innerLayout,this.config),events.forEach(e=>{this.$el.on(e.completeName,e.handler(this))})},watch:{data:{handler(){this.schedule({replot:!0})},deep:!0},options:{handler(e,t){JSON.stringify(e)!==JSON.stringify(t)&&this.schedule({replot:!0})},deep:!0},layout(e){this.innerLayout={...e},this.schedule({replot:!1})}},computed:{options(){return{responsive:!1,...Object.keys(this.$attrs).reduce((e,t)=>(e[camelize(t)]=this.$attrs[t],e),{})}}},beforeDestroy(){events.forEach(e=>this.$el.removeAllListeners(e.completeName)),Plotly.purge(this.$el)},methods:{...methods,onResize(){Plotly.Plots.resize(this.$el)},schedule(e){let{scheduled:t}=this;t?t.replot=t.replot||e.replot:(this.scheduled=e,this.$nextTick(()=>{let{scheduled:{replot:e}}=this;this.scheduled=null,e?this.react():this.relayout(this.innerLayout)}))},toImage(e){let t=Object.assign(this.getPrintOptions(),e);return Plotly.toImage(this.$el,t)},downloadImage(e){let t=`plot--${(new Date).toISOString()}`,i=Object.assign(this.getPrintOptions(),{filename:t},e);return Plotly.downloadImage(this.$el,i)},getPrintOptions(){let{$el:e}=this;return{format:"png",width:e.clientWidth,height:e.clientHeight}},react(){Plotly.react(this.$el,this.data,this.innerLayout,this.config)}}});